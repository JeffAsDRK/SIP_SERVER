<% 
var body = ` 
<!-- Real-time Monitoring Dashboard -->
<div class="row mb-4">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="fas fa-chart-line"></i> Monitoreo en Tiempo Real</h5>
                <div>
                    <span id="last-update" class="text-muted small">Último update: --</span>
                    <button class="btn btn-sm btn-outline-primary ms-2" onclick="forceUpdate()">
                        <i class="fas fa-sync"></i>
                    </button>
                </div>
            </div>
            <div class="card-body">
                <canvas id="connectionsChart" width="400" height="200"></canvas>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0"><i class="fas fa-info-circle"></i> Estado del Sistema</h6>
            </div>
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <span>Estado Asterisk:</span>
                    <span id="asterisk-status" class="badge bg-secondary">Verificando...</span>
                </div>
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <span>Puerto SIP:</span>
                    <span id="sip-port-status" class="badge bg-secondary">5060</span>
                </div>
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <span>Usuarios Online:</span>
                    <span id="online-count" class="badge bg-info">0</span>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                    <span>Total Usuarios:</span>
                    <span id="total-count" class="badge bg-primary">0</span>
                </div>
            </div>
        </div>
        
        <div class="card mt-3">
            <div class="card-header">
                <h6 class="mb-0"><i class="fas fa-history"></i> Actividad Reciente</h6>
            </div>
            <div class="card-body">
                <div id="activity-log" class="small" style="max-height: 300px; overflow-y: auto;">
                    <div class="text-muted">Esperando eventos...</div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Detailed Users Table -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-users"></i> Estado Detallado de Usuarios</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="detailed-users-table">
                        <thead>
                            <tr>
                                <th>Usuario</th>
                                <th>Tipo</th>
                                <th>IP Address</th>
                                <th>Puerto</th>
                                <th>Estado</th>
                                <th>Última Actividad</th>
                                <th>User Agent</th>
                            </tr>
                        </thead>
                        <tbody id="detailed-users-tbody">
                            <tr>
                                <td colspan="7" class="text-center">
                                    <i class="fas fa-spinner fa-spin"></i> Cargando información...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
let connectionsChart;
let activityLog = [];
let onlineHistory = [];

// Initialize Chart
function initChart() {
    const ctx = document.getElementById('connectionsChart').getContext('2d');
    connectionsChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Usuarios Online',
                data: [],
                borderColor: 'rgb(75, 192, 192)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            },
            plugins: {
                legend: {
                    display: true
                }
            }
        }
    });
}

// Update monitoring data
socket.on('statusUpdate', (data) => {
    const now = new Date();
    const timeStr = now.toLocaleTimeString();
    
    // Update last update time
    document.getElementById('last-update').textContent = 'Último update: ' + timeStr;
    
    // Update system status
    if (data.status) {
        const statusBadge = document.getElementById('asterisk-status');
        const isRunning = data.status.status === 'running';
        statusBadge.className = 'badge bg-' + (isRunning ? 'success' : 'danger');
        statusBadge.textContent = isRunning ? 'Online' : 'Offline';
        
        // Log activity
        addActivityLog(isRunning ? 'success' : 'danger', 
                      'Sistema ' + (isRunning ? 'online' : 'offline'), timeStr);
    }
    
    // Update peers information
    if (data.peers) {
        updateDetailedUsersTable(data.peers);
        
        const onlineCount = data.peers.filter(peer => 
            peer.status.toLowerCase().includes('ok')).length;
        
        document.getElementById('online-count').textContent = onlineCount;
        
        // Update chart
        updateChart(onlineCount, timeStr);
        
        // Log peer changes
        data.peers.forEach(peer => {
            const isOnline = peer.status.toLowerCase().includes('ok');
            const prevStatus = getPreviousStatus(peer.name);
            
            if (prevStatus !== null && prevStatus !== isOnline) {
                addActivityLog(isOnline ? 'success' : 'warning',
                             peer.name + (isOnline ? ' conectado' : ' desconectado'), timeStr);
            }
            
            setPreviousStatus(peer.name, isOnline);
        });
    }
});

// Previous status tracking
let previousStatuses = {};

function getPreviousStatus(username) {
    return previousStatuses[username] || null;
}

function setPreviousStatus(username, status) {
    previousStatuses[username] = status;
}

function updateChart(onlineCount, timeStr) {
    const chart = connectionsChart;
    
    // Keep only last 20 points
    if (chart.data.labels.length >= 20) {
        chart.data.labels.shift();
        chart.data.datasets[0].data.shift();
    }
    
    chart.data.labels.push(timeStr);
    chart.data.datasets[0].data.push(onlineCount);
    chart.update();
}

function updateDetailedUsersTable(peers) {
    const tbody = document.getElementById('detailed-users-tbody');
    
    if (peers.length === 0) {
        tbody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">No hay conexiones activas</td></tr>';
        return;
    }
    
    tbody.innerHTML = peers.map(peer => {
        const isOnline = peer.status.toLowerCase().includes('ok');
        const statusClass = isOnline ? 'success' : 'danger';
        const statusIcon = isOnline ? 'check-circle' : 'times-circle';
        
        // Determine user type by number range
        let userType = 'General';
        let typeClass = 'secondary';
        if (peer.name.startsWith('1')) {
            userType = 'Zoiper';
            typeClass = 'primary';
        } else if (peer.name.startsWith('2')) {
            userType = 'Dahua';
            typeClass = 'warning';
        } else if (peer.name.startsWith('3')) {
            userType = 'Hikvision';
            typeClass = 'info';
        }
        
        return `
            <tr class="${isOnline ? '' : 'table-secondary'}">
                <td><strong>${peer.name}</strong></td>
                <td><span class="badge bg-${typeClass}">${userType}</span></td>
                <td><code>${peer.host}</code></td>
                <td>${peer.port}</td>
                <td><span class="badge bg-${statusClass}"><i class="fas fa-${statusIcon}"></i> ${peer.status}</span></td>
                <td><small>${peer.lastSeen}</small></td>
                <td><small class="text-muted">SIP Client</small></td>
            </tr>
        `;
    }).join('');
}

function addActivityLog(type, message, time) {
    const logContainer = document.getElementById('activity-log');
    
    const logEntry = document.createElement('div');
    logEntry.className = 'border-bottom pb-2 mb-2';
    
    let iconClass = 'info-circle';
    let textClass = 'primary';
    
    switch(type) {
        case 'success':
            iconClass = 'check-circle';
            textClass = 'success';
            break;
        case 'warning':
            iconClass = 'exclamation-triangle';
            textClass = 'warning';
            break;
        case 'danger':
            iconClass = 'times-circle';
            textClass = 'danger';
            break;
    }
    
    logEntry.innerHTML = `
        <div class="d-flex justify-content-between align-items-center">
            <span><i class="fas fa-${iconClass} text-${textClass}"></i> ${message}</span>
            <small class="text-muted">${time}</small>
        </div>
    `;
    
    // Insert at the beginning
    if (logContainer.firstChild && logContainer.firstChild.textContent !== 'Esperando eventos...') {
        logContainer.insertBefore(logEntry, logContainer.firstChild);
    } else {
        logContainer.innerHTML = '';
        logContainer.appendChild(logEntry);
    }
    
    // Keep only last 10 entries
    while (logContainer.children.length > 10) {
        logContainer.removeChild(logContainer.lastChild);
    }
}

function forceUpdate() {
    socket.emit('requestStatus');
    addActivityLog('info', 'Actualización manual solicitada', new Date().toLocaleTimeString());
}

// Initialize when page loads
document.addEventListener('DOMContentLoaded', function() {
    initChart();
    
    // Load total users count
    fetch('/api/users')
        .then(response => response.json())
        .then(users => {
            document.getElementById('total-count').textContent = users.length || 0;
        })
        .catch(() => {
            document.getElementById('total-count').textContent = '0';
        });
});

// Request initial data
socket.emit('requestStatus');
</script>
`;
%>
<%- include('layout', { body: body }) %>